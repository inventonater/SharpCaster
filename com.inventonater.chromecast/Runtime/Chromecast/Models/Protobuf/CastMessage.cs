using Google.Protobuf;
using Newtonsoft.Json;
using Inventonater.Chromecast;
using System;
using System.Linq;

namespace Extensions.Api.CastChannel
{
    /// <summary>
    /// Extension methods for the CastMessage class generated by Protocol Buffers
    /// </summary>
    public sealed partial class CastMessage
    {
        /// <summary>
        /// Initializes default values for the CastMessage
        /// </summary>
        partial void OnConstruction()
        {
            DestinationId = DefaultIdentifiers.DESTINATION_ID;
            SourceId = DefaultIdentifiers.SENDER_ID;
        }

        /// <summary>
        /// Initializes a new instance of the CastMessage class with specific source and destination IDs
        /// </summary>
        /// <param name="destinationId">The destination ID</param>
        /// <param name="sourceId">The source ID</param>
        public CastMessage(string destinationId, string sourceId)
        {
            OnConstruction();

            DestinationId = destinationId;
            SourceId = sourceId;
        }

        /// <summary>
        /// Converts the CastMessage to a Protocol Buffer byte array
        /// </summary>
        /// <param name="includeHeader">Whether to include the size header</param>
        /// <returns>The serialized Protocol Buffer with optional header</returns>
        public byte[] ToProto(bool includeHeader = true)
        {
            var bytes = this.ToByteArray();

            if (includeHeader)
            {
                var header = BitConverter.GetBytes((uint)bytes.Length);
                var dataToSend = header.Reverse().ToList();
                dataToSend.AddRange(bytes.ToList());
                bytes = dataToSend.ToArray();
            }

            return bytes;
        }

        /// <summary>
        /// Gets the JSON type from the payload
        /// </summary>
        /// <returns>The type of the message</returns>
        public string GetJsonType()
        {
            if (string.IsNullOrEmpty(PayloadUtf8))
            {
                return string.Empty;
            }

            try
            {
                dynamic stuff = JsonConvert.DeserializeObject(PayloadUtf8);
                return stuff.type;
            }
            catch
            {
                return string.Empty;
            }
        }
    }
}
